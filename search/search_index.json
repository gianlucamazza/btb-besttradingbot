{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Best Trading Bot","text":"<p>Welcome to the Best Trading Bot (BTB) documentation!</p>"},{"location":"index.html#overview","title":"Overview","text":"<p>Best Trading Bot is a powerful, customizable cryptocurrency trading bot that leverages various strategies and machine learning models to automate trading decisions. It provides backtesting capabilities, real-time trading, and comprehensive analytics to help you make informed trading decisions.</p>"},{"location":"index.html#key-features","title":"Key Features","text":"<ul> <li>Multiple Trading Strategies: Choose from a variety of built-in strategies or create your own</li> <li>Advanced Backtesting: Test your strategies against historical data</li> <li>Real-time Trading: Execute trades automatically on supported exchanges</li> <li>Machine Learning Models: Use predictive models to enhance trading decisions</li> <li>Customizable Configuration: Tailor the bot to your specific trading preferences</li> <li>Comprehensive Analytics: Monitor performance with detailed metrics and visualizations</li> </ul>"},{"location":"index.html#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Getting Started: Installation instructions, quick start guide, and configuration options</li> <li>User Guide: Detailed information on backtesting, strategies, and models</li> <li>Developer Guide: Guidelines for contributing to the project and implementation details</li> <li>Reference: API documentation, update history, and final results</li> </ul> <p>Select a section from the navigation menu to get started.</p>"},{"location":"API_REFERENCE.html","title":"API Reference","text":""},{"location":"API_REFERENCE.html#overview","title":"Overview","text":"<p>This document provides a comprehensive reference for the BestTradingBot API, including modules, classes, and functions that make up the system. It serves as a technical reference for developers looking to understand or extend the functionality of the trading bot.</p>"},{"location":"API_REFERENCE.html#core-modules","title":"Core Modules","text":""},{"location":"API_REFERENCE.html#btbmodels","title":"btb.models","text":"<p>The <code>models</code> module contains all machine learning model implementations.</p>"},{"location":"API_REFERENCE.html#btbmodelsbase","title":"btb.models.base","text":"<pre><code>class BaseModel(ABC):\n    \"\"\"Abstract base class for all models.\"\"\"\n\n    @abstractmethod\n    def __init__(self, config: Dict):\n        \"\"\"Initialize model with configuration.\"\"\"\n        pass\n\n    @abstractmethod\n    def train(self, train_data: Any, validation_data: Optional[Any] = None) -&gt; Dict:\n        \"\"\"Train the model and return training metrics.\"\"\"\n        pass\n\n    @abstractmethod\n    def predict(self, data: Any) -&gt; np.ndarray:\n        \"\"\"Generate predictions for the input data.\"\"\"\n        pass\n\n    @abstractmethod\n    def save(self, path: str) -&gt; None:\n        \"\"\"Save model to disk.\"\"\"\n        pass\n\n    @classmethod\n    @abstractmethod\n    def load(cls, path: str) -&gt; 'BaseModel':\n        \"\"\"Load model from disk.\"\"\"\n        pass\n</code></pre>"},{"location":"API_REFERENCE.html#btbmodelstransformer","title":"btb.models.transformer","text":"<pre><code>class TransformerModel(BaseModel):\n    \"\"\"Transformer-based model for time series prediction.\"\"\"\n\n    def __init__(self, config: Dict):\n        \"\"\"Initialize transformer model.\n\n        Args:\n            config: Dict containing model parameters including:\n                - input_dim: Dimension of input features\n                - hidden_dim: Dimension of hidden layers\n                - num_layers: Number of transformer layers\n                - nhead: Number of attention heads\n                - dropout: Dropout rate\n                - output_dim: Dimension of output\n        \"\"\"\n        self.config = config\n        self.model = self._build_model()\n\n    def _build_model(self) -&gt; nn.Module:\n        \"\"\"Build and return PyTorch model.\"\"\"\n        # Implementation details\n\n    def train(self, train_data, validation_data=None) -&gt; Dict:\n        \"\"\"Train the model.\n\n        Args:\n            train_data: Training data loader or dataset\n            validation_data: Validation data loader or dataset\n\n        Returns:\n            Dict of training metrics\n        \"\"\"\n        # Implementation details\n\n    def predict(self, data) -&gt; np.ndarray:\n        \"\"\"Generate predictions.\n\n        Args:\n            data: Input data for prediction\n\n        Returns:\n            Numpy array of predictions\n        \"\"\"\n        # Implementation details\n\n    def save(self, path: str) -&gt; None:\n        \"\"\"Save model to specified path.\"\"\"\n        # Implementation details\n\n    @classmethod\n    def load(cls, path: str) -&gt; 'TransformerModel':\n        \"\"\"Load model from specified path.\"\"\"\n        # Implementation details\n</code></pre>"},{"location":"API_REFERENCE.html#btbdata","title":"btb.data","text":"<p>The <code>data</code> module handles data loading, processing, and feature engineering.</p>"},{"location":"API_REFERENCE.html#btbdataloader","title":"btb.data.loader","text":"<pre><code>class DataLoader:\n    \"\"\"Base class for data loading operations.\"\"\"\n\n    def __init__(self, config: Dict):\n        \"\"\"Initialize data loader with configuration.\"\"\"\n        self.config = config\n\n    def load_data(self, symbols: List[str], timeframes: List[str], \n                  start_date: str, end_date: str) -&gt; Dict[str, pd.DataFrame]:\n        \"\"\"Load market data for given symbols and timeframes.\n\n        Args:\n            symbols: List of market symbols (e.g., \"BTCUSDT\")\n            timeframes: List of timeframes (e.g., \"1h\", \"4h\")\n            start_date: Start date for data loading\n            end_date: End date for data loading\n\n        Returns:\n            Dict mapping symbol_timeframe to DataFrames\n        \"\"\"\n        # Implementation details\n</code></pre>"},{"location":"API_REFERENCE.html#btbdatafeatures","title":"btb.data.features","text":"<pre><code>class FeatureEngineering:\n    \"\"\"Feature engineering for market data.\"\"\"\n\n    def __init__(self, config: Dict = None):\n        \"\"\"Initialize feature engineering with optional configuration.\"\"\"\n        self.config = config or {}\n\n    def add_technical_indicators(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"Add technical indicators to the data.\n\n        Args:\n            data: DataFrame with OHLCV data\n\n        Returns:\n            DataFrame with added technical indicators\n        \"\"\"\n        # Implementation details\n\n    def add_temporal_features(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"Add temporal features like hour of day, day of week, etc.\n\n        Args:\n            data: DataFrame with time index\n\n        Returns:\n            DataFrame with added temporal features\n        \"\"\"\n        # Implementation details\n\n    def normalize_features(self, data: pd.DataFrame, method: str = \"min_max\") -&gt; Tuple[pd.DataFrame, Any]:\n        \"\"\"Normalize features in the data.\n\n        Args:\n            data: DataFrame with features\n            method: Normalization method (\"min_max\", \"z_score\", \"robust\")\n\n        Returns:\n            Tuple of (normalized DataFrame, scaler object)\n        \"\"\"\n        # Implementation details\n</code></pre>"},{"location":"API_REFERENCE.html#btbstrategies","title":"btb.strategies","text":"<p>The <code>strategies</code> module contains trading strategy implementations.</p>"},{"location":"API_REFERENCE.html#btbstrategiesfactory","title":"btb.strategies.factory","text":"<pre><code>def register_strategy(strategy_name: str):\n    \"\"\"Decorator to register a strategy class.\"\"\"\n    def decorator(cls):\n        STRATEGY_REGISTRY[strategy_name] = cls\n        return cls\n    return decorator\n\ndef create_strategy(strategy_name: str, params: Dict) -&gt; BaseStrategy:\n    \"\"\"Create a strategy instance by name.\n\n    Args:\n        strategy_name: Name of the strategy to create\n        params: Strategy parameters\n\n    Returns:\n        Instantiated strategy object\n\n    Raises:\n        ValueError: If strategy_name is not registered\n    \"\"\"\n    if strategy_name not in STRATEGY_REGISTRY:\n        raise ValueError(f\"Unknown strategy: {strategy_name}\")\n    return STRATEGY_REGISTRY[strategy_name](params)\n</code></pre>"},{"location":"API_REFERENCE.html#btbexchange","title":"btb.exchange","text":"<p>The <code>exchange</code> module handles interaction with cryptocurrency exchanges.</p>"},{"location":"API_REFERENCE.html#btbexchangebybit","title":"btb.exchange.bybit","text":"<pre><code>class BybitExchange(BaseExchange):\n    \"\"\"Bybit exchange integration.\"\"\"\n\n    def __init__(self, config: Dict):\n        \"\"\"Initialize Bybit exchange connection.\n\n        Args:\n            config: Dictionary with configuration including:\n                - api_key: Bybit API key\n                - api_secret: Bybit API secret\n                - testnet: Whether to use testnet (bool)\n        \"\"\"\n        super().__init__(config)\n        self.client = self._init_client()\n\n    def _init_client(self):\n        \"\"\"Initialize exchange client.\"\"\"\n        import ccxt\n        # Client initialization details\n\n    def get_market_data(self, symbol: str, timeframe: str, since: int = None, limit: int = 100) -&gt; pd.DataFrame:\n        \"\"\"Get market data from exchange.\n\n        Args:\n            symbol: Market symbol (e.g., \"BTCUSDT\")\n            timeframe: Timeframe (e.g., \"1h\", \"4h\")\n            since: Start time in milliseconds\n            limit: Number of candles to fetch\n\n        Returns:\n            DataFrame with market data\n        \"\"\"\n        # Implementation details\n\n    def place_order(self, symbol: str, order_type: str, side: str, amount: float, price: float = None, params: Dict = None) -&gt; Dict:\n        \"\"\"Place an order on the exchange.\n\n        Args:\n            symbol: Market symbol (e.g., \"BTCUSDT\")\n            order_type: Order type (e.g., \"limit\", \"market\")\n            side: Order side (\"buy\" or \"sell\")\n            amount: Order amount in base currency\n            price: Order price (required for limit orders)\n            params: Additional parameters\n\n        Returns:\n            Order information\n        \"\"\"\n        # Implementation details\n\n    def get_balance(self) -&gt; Dict:\n        \"\"\"Get account balance.\n\n        Returns:\n            Dictionary with balance information\n        \"\"\"\n        # Implementation details\n</code></pre>"},{"location":"API_REFERENCE.html#btbbacktest","title":"btb.backtest","text":"<p>The <code>backtest</code> module provides backtesting functionality.</p>"},{"location":"API_REFERENCE.html#btbbacktestengine","title":"btb.backtest.engine","text":"<pre><code>class Backtester:\n    \"\"\"Backtesting engine for trading strategies.\"\"\"\n\n    def __init__(self, config: Dict):\n        \"\"\"Initialize backtester with configuration.\n\n        Args:\n            config: Configuration dictionary\n        \"\"\"\n        self.config = config\n        self.strategy = self._init_strategy()\n        self.data = self._load_data()\n        self.results = None\n\n    def _init_strategy(self) -&gt; BaseStrategy:\n        \"\"\"Initialize trading strategy.\"\"\"\n        # Implementation details\n\n    def _load_data(self) -&gt; Dict[str, pd.DataFrame]:\n        \"\"\"Load historical data for backtesting.\"\"\"\n        # Implementation details\n\n    def run(self) -&gt; Dict:\n        \"\"\"Run the backtest.\n\n        Returns:\n            Dictionary with backtest results\n        \"\"\"\n        # Implementation details\n\n    def calculate_metrics(self) -&gt; Dict:\n        \"\"\"Calculate performance metrics.\n\n        Returns:\n            Dictionary with performance metrics\n        \"\"\"\n        # Implementation details\n\n    def plot_results(self, filename: str = None):\n        \"\"\"Plot backtest results.\n\n        Args:\n            filename: Optional path to save the plot\n        \"\"\"\n        # Implementation details\n\n    def save_results(self, path: str):\n        \"\"\"Save backtest results to file.\n\n        Args:\n            path: Path to save results\n        \"\"\"\n        # Implementation details\n</code></pre>"},{"location":"API_REFERENCE.html#btbrun","title":"btb.run","text":"<p>The <code>run</code> module handles live trading operations.</p>"},{"location":"API_REFERENCE.html#btbruntrader","title":"btb.run.trader","text":"<pre><code>class Trader:\n    \"\"\"Live trading engine.\"\"\"\n\n    def __init__(self, config: Dict):\n        \"\"\"Initialize trader with configuration.\n\n        Args:\n            config: Configuration dictionary\n        \"\"\"\n        self.config = config\n        self.exchange = self._init_exchange()\n        self.strategy = self._init_strategy()\n        self.data_manager = self._init_data_manager()\n        self.risk_manager = self._init_risk_manager()\n\n    def _init_exchange(self) -&gt; BaseExchange:\n        \"\"\"Initialize exchange connection.\"\"\"\n        # Implementation details\n\n    def _init_strategy(self) -&gt; BaseStrategy:\n        \"\"\"Initialize trading strategy.\"\"\"\n        # Implementation details\n\n    def _init_data_manager(self) -&gt; DataManager:\n        \"\"\"Initialize data manager.\"\"\"\n        # Implementation details\n\n    def _init_risk_manager(self) -&gt; RiskManager:\n        \"\"\"Initialize risk manager.\"\"\"\n        # Implementation details\n\n    def start(self):\n        \"\"\"Start the trading process.\"\"\"\n        # Implementation details\n\n    def stop(self):\n        \"\"\"Stop the trading process.\"\"\"\n        # Implementation details\n\n    def update(self):\n        \"\"\"Update market data and process trading logic.\"\"\"\n        # Implementation details\n</code></pre>"},{"location":"API_REFERENCE.html#utility-modules","title":"Utility Modules","text":""},{"location":"API_REFERENCE.html#btbutilsconfig","title":"btb.utils.config","text":"<pre><code>def load_config(path: str) -&gt; Dict:\n    \"\"\"Load configuration from YAML file.\n\n    Args:\n        path: Path to configuration file\n\n    Returns:\n        Configuration dictionary\n    \"\"\"\n    # Implementation details\n\ndef validate_config(config: Dict, schema: Dict) -&gt; bool:\n    \"\"\"Validate configuration against schema.\n\n    Args:\n        config: Configuration dictionary\n        schema: Validation schema\n\n    Returns:\n        True if valid, otherwise raises ValidationError\n    \"\"\"\n    # Implementation details\n</code></pre>"},{"location":"API_REFERENCE.html#btbutilslogging","title":"btb.utils.logging","text":"<pre><code>def setup_logger(name: str, level: int = logging.INFO) -&gt; logging.Logger:\n    \"\"\"Set up a logger with the specified name and level.\n\n    Args:\n        name: Logger name\n        level: Logging level\n\n    Returns:\n        Configured logger\n    \"\"\"\n    # Implementation details\n</code></pre>"},{"location":"API_REFERENCE.html#command-line-interface","title":"Command Line Interface","text":""},{"location":"API_REFERENCE.html#btbclimain","title":"btb.cli.main","text":"<pre><code>@click.group()\ndef cli():\n    \"\"\"BestTradingBot command line interface.\"\"\"\n    pass\n\n@cli.command()\n@click.option('--config', '-c', required=True, help='Path to configuration file')\ndef run(config):\n    \"\"\"Run the trading bot with the specified configuration.\"\"\"\n    # Implementation details\n\n@cli.command()\n@click.option('--config', '-c', required=True, help='Path to backtest configuration')\n@click.option('--output', '-o', default=None, help='Path to save backtest results')\ndef backtest(config, output):\n    \"\"\"Run backtest with the specified configuration.\"\"\"\n    # Implementation details\n\n@cli.command()\n@click.option('--data', '-d', required=True, help='Path to training data')\n@click.option('--model', '-m', required=True, help='Model type to train')\n@click.option('--config', '-c', default=None, help='Path to model configuration')\n@click.option('--output', '-o', default='models/', help='Directory to save trained model')\ndef train(data, model, config, output):\n    \"\"\"Train a model with the specified configuration.\"\"\"\n    # Implementation details\n</code></pre>"},{"location":"API_REFERENCE.html#extension-points","title":"Extension Points","text":"<p>The BestTradingBot is designed with extensibility in mind. Here are the main extension points:</p> <ol> <li>Custom Models: Create new model architectures by subclassing <code>BaseModel</code></li> <li>Custom Strategies: Implement new trading strategies by subclassing <code>BaseStrategy</code></li> <li>Custom Indicators: Add new technical indicators to <code>FeatureEngineering</code></li> <li>Exchange Integrations: Add support for new exchanges by subclassing <code>BaseExchange</code></li> <li>Risk Management: Extend <code>RiskManager</code> with custom risk management algorithms</li> </ol>"},{"location":"API_REFERENCE.html#error-handling","title":"Error Handling","text":"<p>The system uses custom exceptions for different error types:</p> <pre><code>class BTBError(Exception):\n    \"\"\"Base class for all BTB exceptions.\"\"\"\n    pass\n\nclass ConfigError(BTBError):\n    \"\"\"Configuration-related errors.\"\"\"\n    pass\n\nclass ExchangeError(BTBError):\n    \"\"\"Exchange-related errors.\"\"\"\n    pass\n\nclass DataError(BTBError):\n    \"\"\"Data-related errors.\"\"\"\n    pass\n\nclass ModelError(BTBError):\n    \"\"\"Model-related errors.\"\"\"\n    pass\n</code></pre>"},{"location":"API_REFERENCE.html#configuration-schema","title":"Configuration Schema","text":"<p>Configuration validation uses JSON Schema. Here's an example of the trading configuration schema:</p> <pre><code>TRADING_CONFIG_SCHEMA = {\n    \"type\": \"object\",\n    \"required\": [\"exchange\", \"trading\", \"risk\", \"data\"],\n    \"properties\": {\n        \"exchange\": {\n            \"type\": \"object\",\n            \"required\": [\"name\", \"testnet\"],\n            \"properties\": {\n                \"name\": {\"type\": \"string\"},\n                \"testnet\": {\"type\": \"boolean\"},\n                \"rate_limit\": {\"type\": \"boolean\"}\n            }\n        },\n        \"trading\": {\n            \"type\": \"object\",\n            \"required\": [\"symbols\", \"timeframes\", \"strategy\"],\n            \"properties\": {\n                \"symbols\": {\n                    \"type\": \"array\",\n                    \"items\": {\"type\": \"string\"}\n                },\n                \"timeframes\": {\n                    \"type\": \"array\",\n                    \"items\": {\"type\": \"string\"}\n                },\n                \"strategy\": {\"type\": \"string\"},\n                \"position_size\": {\"type\": \"number\"},\n                \"max_open_positions\": {\"type\": \"integer\"}\n            }\n        },\n        # Other schema sections...\n    }\n}\n</code></pre>"},{"location":"API_REFERENCE.html#api-client-example","title":"API Client Example","text":"<p>Here's an example of using the BestTradingBot API programmatically:</p> <pre><code>from btb.utils.config import load_config\nfrom btb.exchange.factory import create_exchange\nfrom btb.strategies.factory import create_strategy\nfrom btb.data.loader import DataLoader\nfrom btb.run.trader import Trader\n\n# Load configuration\nconfig = load_config(\"config/trading_config.yaml\")\n\n# Create exchange instance\nexchange = create_exchange(config[\"exchange\"][\"name\"], config[\"exchange\"])\n\n# Create strategy instance\nstrategy = create_strategy(config[\"trading\"][\"strategy\"], config[\"strategy_params\"])\n\n# Create data loader\ndata_loader = DataLoader(config[\"data\"])\n\n# Create and run trader\ntrader = Trader(config)\ntrader.start()\n\n# Stop trader when done\ntry:\n    # Trading loop\n    while True:\n        time.sleep(60)\n except KeyboardInterrupt:\n    trader.stop()\n</code></pre>"},{"location":"CODE_OF_CONDUCT.html","title":"Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT.html#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes</li> <li>Focusing on what is best for the community</li> </ul> <p>Examples of unacceptable behavior:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT.html#enforcement","title":"Enforcement","text":"<p>Violations of the code of conduct may be reported to the project team. All complaints will be reviewed and investigated promptly and fairly.</p>"},{"location":"CODE_OF_CONDUCT.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p>"},{"location":"CONFIGURATION.html","title":"Configuration Guide","text":"<p>This guide explains how to configure Best Trading Bot (BTB) for your specific needs.</p>"},{"location":"CONFIGURATION.html#configuration-files","title":"Configuration Files","text":"<p>BTB uses YAML files for configuration. The main configuration files are located in the <code>config/</code> directory:</p> <ul> <li><code>backtest_config.yaml</code>: Configuration for backtesting</li> <li><code>model_config.yaml</code>: Configuration for machine learning models</li> <li><code>trading_config.yaml</code>: Configuration for live trading</li> </ul>"},{"location":"CONFIGURATION.html#backtest-configuration","title":"Backtest Configuration","text":"<p>The <code>backtest_config.yaml</code> file controls backtesting parameters:</p> <pre><code>backtest:\n  symbols: [\"BTCUSDT\", \"ETHUSDT\"]  # Trading pairs to backtest\n  timeframe: \"1h\"  # Timeframe (1m, 5m, 15m, 1h, 4h, 1d)\n  start_date: \"2022-01-01\"  # Backtest start date\n  end_date: \"2022-12-31\"  # Backtest end date\n  initial_capital: 10000  # Starting capital in USD\n  fee_rate: 0.001  # Trading fee (0.1%)\n  slippage: 0.0005  # Slippage estimate (0.05%)\n\nstrategy:\n  name: \"transformer_strategy\"  # Strategy to use\n  model_path: \"models/transformer_btcusdt_1h.pt\"  # Path to trained model\n  confidence_threshold: 0.65  # Minimum confidence for trade execution\n  position_size: 0.1  # Portion of capital per trade (10%)\n  stop_loss: 0.02  # Stop loss percentage (2%)\n  take_profit: 0.04  # Take profit percentage (4%)\n  trailing_stop: true  # Enable trailing stop\n</code></pre>"},{"location":"CONFIGURATION.html#model-configuration","title":"Model Configuration","text":"<p>The <code>model_config.yaml</code> file defines parameters for machine learning models:</p> <pre><code>model:\n  type: \"transformer\"  # Model type (transformer, lstm)\n\n  # Common parameters\n  sequence_length: 60  # Input sequence length\n  prediction_horizon: 24  # Future prediction horizon\n  batch_size: 64  # Training batch size\n  learning_rate: 0.0001  # Learning rate\n  epochs: 100  # Maximum training epochs\n  early_stopping: 10  # Early stopping patience\n\n  # Transformer specific\n  transformer:\n    input_dim: 32  # Input dimension\n    hidden_dim: 128  # Hidden dimension\n    num_layers: 4  # Number of transformer layers\n    nhead: 8  # Number of attention heads\n    dropout: 0.1  # Dropout rate\n\n  # LSTM specific\n  lstm:\n    input_dim: 32  # Input dimension\n    hidden_dim: 128  # Hidden dimension\n    num_layers: 3  # Number of LSTM layers\n    dropout: 0.2  # Dropout rate\n    bidirectional: true  # Whether to use bidirectional LSTM\n\n# Feature engineering\nfeatures:\n  include_raw_price: true  # Include raw price data\n  include_returns: true  # Include price returns\n  normalize: true  # Apply normalization\n  technical_indicators:  # Technical indicators to include\n    - \"RSI\"\n    - \"MACD\"\n    - \"BB\"\n    - \"ATR\"\n    - \"SMA\"\n    - \"EMA\"\n</code></pre>"},{"location":"CONFIGURATION.html#trading-configuration","title":"Trading Configuration","text":"<p>The <code>trading_config.yaml</code> file configures live trading:</p> <pre><code>exchange:\n  name: \"bybit\"  # Exchange to use\n  testnet: true  # Whether to use testnet (set to false for real trading)\n\ntrading:\n  symbols: [\"BTCUSDT\"]  # Trading pairs\n  timeframes: [\"1h\"]  # Timeframes to monitor\n  position_size: 0.1  # Portion of capital per trade (10%)\n  check_interval: 60  # Data update interval in seconds\n\nstrategy:\n  name: \"transformer_strategy\"  # Strategy to use\n  model_path: \"models/transformer_btcusdt_1h.pt\"  # Path to trained model\n  confidence_threshold: 0.7  # Minimum confidence for trade execution\n\nrisk_management:\n  max_open_positions: 3  # Maximum simultaneous positions\n  max_daily_trades: 5  # Maximum trades per day\n  stop_loss: 0.02  # Stop loss percentage (2%)\n  take_profit: 0.04  # Take profit percentage (4%)\n  trailing_stop: true  # Enable trailing stop\n  trailing_stop_activation: 0.01  # Activate trailing stop after 1% profit\n  trailing_stop_distance: 0.005  # Trailing stop follows price at 0.5% distance\n</code></pre>"},{"location":"CONFIGURATION.html#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the project root to store sensitive information like API credentials:</p> <pre><code>BYBIT_API_KEY=your_api_key\nBYBIT_API_SECRET=your_api_secret\nBYBIT_TESTNET=True  # Set to False for live trading\n</code></pre>"},{"location":"CONFIGURATION.html#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"CONFIGURATION.html#logging","title":"Logging","text":"<p>Logging settings can be adjusted in <code>btb/utils/logging.py</code>:</p> <pre><code># Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL\nlog_level = logging.INFO\n\n# Log to console\nconsole_logging = True\n\n# Log to file\nfile_logging = True\nlog_file = \"logs/btb.log\"\n</code></pre>"},{"location":"CONFIGURATION.html#custom-strategies","title":"Custom Strategies","text":"<p>To add a custom strategy:</p> <ol> <li>Create a new file in <code>btb/strategies/</code></li> <li>Subclass <code>BaseStrategy</code> and implement required methods</li> <li>Register your strategy in the factory</li> <li>Update the configuration to use your strategy</li> </ol> <p>For more detailed information, see the API Reference.</p>"},{"location":"CONTRIBUTING.html","title":"Contributing Guidelines","text":""},{"location":"CONTRIBUTING.html#overview","title":"Overview","text":"<p>Thank you for your interest in contributing to BestTradingBot! This document provides guidelines and instructions for contributing to the project. We appreciate all contributions, whether they're bug reports, feature requests, documentation improvements, or code changes.</p>"},{"location":"CONTRIBUTING.html#code-of-conduct","title":"Code of Conduct","text":"<p>Please read and follow our Code of Conduct to keep our community respectful and inclusive.</p>"},{"location":"CONTRIBUTING.html#getting-started","title":"Getting Started","text":""},{"location":"CONTRIBUTING.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>Git</li> <li>Basic understanding of PyTorch, trading systems, and machine learning</li> </ul>"},{"location":"CONTRIBUTING.html#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li>Fork the repository</li> <li>Clone your fork locally:</li> </ol> <pre><code>git clone https://github.com/yourusername/btb-besttradingbot.git\ncd btb-besttradingbot\n</code></pre> <ol> <li>Set up a virtual environment:</li> </ol> <pre><code># Create a virtual environment\npython -m venv .venv\n\n# Activate the virtual environment\n# On macOS/Linux:\nsource .venv/bin/activate\n# On Windows:\n# .venv\\Scripts\\activate\n</code></pre> <ol> <li>Install development dependencies:</li> </ol> <pre><code>pip install -e \".[dev]\"\npip install -r requirements.txt\n</code></pre> <ol> <li>Set up pre-commit hooks:</li> </ol> <pre><code>pre-commit install\n</code></pre>"},{"location":"CONTRIBUTING.html#development-process","title":"Development Process","text":""},{"location":"CONTRIBUTING.html#branching-strategy","title":"Branching Strategy","text":"<p>We follow a simplified Git flow model:</p> <ul> <li><code>main</code>: Stable release branch</li> <li><code>develop</code>: Active development branch</li> <li>Feature branches: Created from <code>develop</code> for specific features or fixes</li> </ul> <p>Name your feature branches following this convention: <code>feature/descriptive-name</code> or <code>fix/issue-description</code>.</p>"},{"location":"CONTRIBUTING.html#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a branch from <code>develop</code> for your feature or fix</li> <li>Make your changes, following our coding standards</li> <li>Add or update tests to cover your changes</li> <li>Update documentation if necessary</li> <li>Run tests and static analysis to ensure everything passes</li> <li>Submit a pull request to the <code>develop</code> branch</li> <li>Address any feedback during code review</li> <li>Once approved, your PR will be merged</li> </ol>"},{"location":"CONTRIBUTING.html#coding-standards","title":"Coding Standards","text":""},{"location":"CONTRIBUTING.html#style-guide","title":"Style Guide","text":"<p>We follow PEP 8 with a few exceptions:</p> <ul> <li>Line length: 100 characters maximum</li> <li>Import order: standard library, third-party packages, local modules</li> </ul> <p>We use a combination of Black, isort, and ruff for code formatting and linting.</p>"},{"location":"CONTRIBUTING.html#docstrings","title":"Docstrings","text":"<p>We use Google-style docstrings for all public functions, classes, and methods:</p> <pre><code>def function_with_types_in_docstring(param1: int, param2: str) -&gt; bool:\n    \"\"\"Example function with types documented in the docstring.\n\n    Args:\n        param1: The first parameter.\n        param2: The second parameter.\n\n    Returns:\n        The return value. True for success, False otherwise.\n\n    Raises:\n        ValueError: If param1 is less than 0.\n    \"\"\"\n    if param1 &lt; 0:\n        raise ValueError(\"param1 must be &gt;= 0\")\n    return param1 &gt; 0\n</code></pre>"},{"location":"CONTRIBUTING.html#type-hints","title":"Type Hints","text":"<p>We use Python type hints for all function arguments and return values:</p> <pre><code>from typing import Dict, List, Optional, Tuple, Union\n\ndef process_data(data: pd.DataFrame, config: Dict[str, Any]) -&gt; Tuple[pd.DataFrame, Dict[str, float]]:\n    # Implementation\n    return processed_data, metrics\n</code></pre>"},{"location":"CONTRIBUTING.html#testing","title":"Testing","text":""},{"location":"CONTRIBUTING.html#writing-tests","title":"Writing Tests","text":"<p>We use pytest for our testing framework. All tests should be placed in the <code>tests/</code> directory, following the same structure as the module they test.</p> <p>Each test file should start with <code>test_</code> and each test function should also start with <code>test_</code>.</p> <pre><code># tests/models/test_transformer.py\nimport pytest\nimport torch\nfrom btb.models.transformer import TransformerModel\n\ndef test_transformer_initialization():\n    config = {\n        \"input_dim\": 10,\n        \"hidden_dim\": 64,\n        \"output_dim\": 2,\n        \"num_layers\": 3,\n        \"nhead\": 8\n    }\n    model = TransformerModel(config)\n    assert isinstance(model, TransformerModel)\n    # More assertions...\n\ndef test_transformer_forward_pass():\n    # Test the forward pass logic\n    # ...\n</code></pre>"},{"location":"CONTRIBUTING.html#running-tests","title":"Running Tests","text":"<p>To run the tests:</p> <pre><code>pytest\n</code></pre> <p>To run tests with coverage:</p> <pre><code>pytest --cov=btb tests/\n</code></pre>"},{"location":"CONTRIBUTING.html#documentation","title":"Documentation","text":""},{"location":"CONTRIBUTING.html#writing-documentation","title":"Writing Documentation","text":"<p>We use Markdown for documentation. All documentation files should be placed in the <code>docs/</code> directory.</p> <p>When adding new features, please update relevant documentation files or create new ones if needed. Documentation should be clear, concise, and include examples when appropriate.</p>"},{"location":"CONTRIBUTING.html#building-documentation","title":"Building Documentation","text":"<p>To build the documentation locally:</p> <pre><code>mkdocs build\n</code></pre> <p>To serve the documentation site locally for preview:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"CONTRIBUTING.html#submitting-changes","title":"Submitting Changes","text":""},{"location":"CONTRIBUTING.html#issue-tracking","title":"Issue Tracking","text":"<p>Before starting work on a new feature or fix, check the issue tracker to see if it's already being discussed. If not, create a new issue to discuss the proposed changes before investing significant time in implementation.</p>"},{"location":"CONTRIBUTING.html#pull-requests","title":"Pull Requests","text":"<p>When submitting a pull request:</p> <ol> <li>Reference any related issues in the PR description</li> <li>Provide a clear description of the changes made</li> <li>Include any necessary testing instructions</li> <li>Update relevant documentation</li> <li>Ensure all CI checks pass</li> </ol>"},{"location":"CONTRIBUTING.html#release-process","title":"Release Process","text":"<p>Our release process follows these steps:</p> <ol> <li>Feature freeze on <code>develop</code> branch</li> <li>Comprehensive testing and bug fixing</li> <li>Version bump according to Semantic Versioning</li> <li>Release candidate testing</li> <li>Merge to <code>main</code> branch</li> <li>Tag release with version number</li> <li>Build and publish package</li> </ol>"},{"location":"CONTRIBUTING.html#additional-resources","title":"Additional Resources","text":"<ul> <li>Project Home</li> <li>Installation Guide</li> <li>Configuration Guide</li> <li>Discord Community</li> </ul>"},{"location":"CONTRIBUTING.html#recognition","title":"Recognition","text":"<p>All contributors will be recognized in our CONTRIBUTORS.md file. We value and appreciate your contributions to making BestTradingBot better!</p>"},{"location":"CONTRIBUTING.html#questions-and-support","title":"Questions and Support","text":"<p>If you have questions or need support with contributing, please:</p> <ul> <li>Open an issue with the \"question\" label</li> <li>Join our Discord community</li> <li>Contact the maintainers directly</li> </ul> <p>Thank you for contributing to BestTradingBot!</p>"},{"location":"CONTRIBUTORS.html","title":"Contributors","text":"<p>This file lists the contributors to the Best Trading Bot project.</p>"},{"location":"CONTRIBUTORS.html#project-maintainers","title":"Project Maintainers","text":"<ul> <li>Project Team</li> </ul>"},{"location":"CONTRIBUTORS.html#contributors_1","title":"Contributors","text":"<ul> <li>Your name could be here! We welcome contributions from the community.</li> </ul>"},{"location":"CONTRIBUTORS.html#how-to-contribute","title":"How to Contribute","text":"<p>Please see our Contributing Guidelines for information on how to contribute to this project.</p>"},{"location":"FINAL_RESULTS.html","title":"BestTradingBot - Final Results","text":""},{"location":"FINAL_RESULTS.html#overview","title":"Overview","text":"<p>After extensive development and refinement, we're pleased to report that the BestTradingBot is now fully implemented and operational. This document summarizes the current state, performance, and capabilities of the system.</p>"},{"location":"FINAL_RESULTS.html#system-status","title":"System Status","text":"<p>The BestTradingBot now offers a complete, end-to-end solution for cryptocurrency trading with the following capabilities:</p> <ol> <li>Data Management: Robust loading, preprocessing, and feature engineering for market data</li> <li>Advanced Models: Fully functional LSTM and Transformer models for time series prediction</li> <li>Strategy Implementation: Moving average and ML-based strategies with risk management</li> <li>Backtesting Engine: Comprehensive historical simulation with detailed metrics</li> <li>Analysis Tools: Walk-forward testing, Monte Carlo simulation, and HTML reporting</li> <li>Live Trading: Production-ready integration with Bybit exchange</li> </ol>"},{"location":"FINAL_RESULTS.html#performance-metrics","title":"Performance Metrics","text":"<p>Our latest backtest (running the transformer strategy on BTC/USDT from 2022-01-01 to 2023-01-01) yielded the following results:</p> <pre><code>Initial capital: $10,000.00\nFinal capital: $12,430.69\nTotal return: 24.31%\nSharpe ratio: 0.27\nMaximum drawdown: 3.25%\nWin rate: 42.64%\n</code></pre> <p>These results demonstrate promising performance with: - A strong total return of 24.31% over one year - Manageable drawdown of only 3.25% - A reasonable win rate of 42.64% (typical for trend-following strategies) - A positive (though modest) Sharpe ratio of 0.27</p>"},{"location":"FINAL_RESULTS.html#implemented-features","title":"Implemented Features","text":""},{"location":"FINAL_RESULTS.html#core-infrastructure","title":"Core Infrastructure","text":"<ul> <li>Command line interface (CLI) for all operations</li> <li>Configuration management via YAML</li> <li>Comprehensive logging system</li> <li>Modular architecture with clean separation of concerns</li> <li>Unit testing framework</li> </ul>"},{"location":"FINAL_RESULTS.html#data-pipeline","title":"Data Pipeline","text":"<ul> <li>Flexible data loading from multiple sources</li> <li>Rich feature engineering capabilities</li> <li>Efficient sequence creation for ML models</li> <li>Advanced preprocessing (normalization, missing data handling)</li> <li>Technical indicator generation</li> </ul>"},{"location":"FINAL_RESULTS.html#machine-learning","title":"Machine Learning","text":"<ul> <li>Custom LSTM implementation with attention mechanism</li> <li>Transformer architecture with positional encoding</li> <li>Model training/validation workflows</li> <li>Hyperparameter optimization</li> <li>Model persistence</li> </ul>"},{"location":"FINAL_RESULTS.html#trading-functionality","title":"Trading Functionality","text":"<ul> <li>Multiple strategy implementations</li> <li>Risk management (stop-loss, take-profit, trailing stops)</li> <li>Position sizing algorithms</li> <li>Order execution logic</li> <li>Exchange integration</li> </ul>"},{"location":"FINAL_RESULTS.html#analysis-tools","title":"Analysis Tools","text":"<ul> <li>Detailed performance metrics</li> <li>Visualizations (equity curves, drawdowns, etc.)</li> <li>Trade statistics</li> <li>HTML report generation</li> <li>Walk-forward analysis</li> </ul>"},{"location":"FINAL_RESULTS.html#recent-fixes-and-improvements","title":"Recent Fixes and Improvements","text":"<ol> <li>Backtester Robustness:</li> <li>Fixed critical NoneType errors in position handling</li> <li>Added proper flow control after closing positions</li> <li> <p>Improved error handling throughout</p> </li> <li> <p>Data Processing:</p> </li> <li>Updated to modern Pandas methods (ffill/bfill)</li> <li>Fixed deprecation warnings</li> <li> <p>Added more robust error checking</p> </li> <li> <p>Model Architecture:</p> </li> <li>Improved Transformer implementation with positional encoding</li> <li>Fixed dimension handling in model architecture</li> <li> <p>Added robust parameter parsing</p> </li> <li> <p>Reporting:</p> </li> <li>Implemented HTML report generation</li> <li>Added interactive visualizations</li> <li> <p>Fixed date handling for monthly returns</p> </li> <li> <p>CLI Commands:</p> </li> <li>Completed model training command implementation</li> <li>Enhanced error handling and feedback</li> <li>Added report generation capability</li> </ol>"},{"location":"FINAL_RESULTS.html#features-by-module","title":"Features by Module","text":""},{"location":"FINAL_RESULTS.html#btbmodels","title":"btb.models","text":"<ul> <li>Base model architecture</li> <li>LSTM with attention</li> <li>Transformer with positional encoding</li> <li>Model training utilities</li> <li>Save/load functionality</li> </ul>"},{"location":"FINAL_RESULTS.html#btbstrategies","title":"btb.strategies","text":"<ul> <li>Base strategy interface</li> <li>Moving average crossover</li> <li>ML-based prediction strategy</li> <li>Strategy factory pattern</li> <li>Position sizing methods</li> </ul>"},{"location":"FINAL_RESULTS.html#btbbacktest","title":"btb.backtest","text":"<ul> <li>Historical data simulation</li> <li>Trade execution modeling</li> <li>Performance metrics</li> <li>Walk-forward analysis</li> <li>Monte Carlo simulation</li> <li>HTML reporting</li> </ul>"},{"location":"FINAL_RESULTS.html#btbdata","title":"btb.data","text":"<ul> <li>Data loading from multiple sources</li> <li>Technical indicator generation</li> <li>Sequence creation</li> <li>Normalization</li> <li>Feature engineering</li> </ul>"},{"location":"FINAL_RESULTS.html#btbexchange","title":"btb.exchange","text":"<ul> <li>Exchange abstraction</li> <li>Bybit implementation</li> <li>Paper trading mode</li> <li>Order management</li> <li>Account information</li> </ul>"},{"location":"FINAL_RESULTS.html#btbcli","title":"btb.cli","text":"<ul> <li>Command line interface</li> <li>Subcommands (backtest, train, run)</li> <li>Parameter parsing</li> <li>Error handling</li> <li>Logging configuration</li> </ul>"},{"location":"FINAL_RESULTS.html#final-results","title":"Final Results","text":"<p>The BestTradingBot is now a complete, production-ready trading system that can:</p> <ol> <li>Process Data: Load, clean, and enhance market data for machine learning</li> <li>Train Models: Build and optimize LSTM and Transformer models</li> <li>Backtest Strategies: Evaluate historical performance with realistic simulations</li> <li>Analyze Results: Generate detailed reports and visualizations</li> <li>Trade Live: Connect to Bybit for automated trading</li> </ol> <p>Most importantly, the system demonstrates promising financial performance with positive returns, manageable risk, and a respectable win rate in backtesting.</p>"},{"location":"FINAL_RESULTS.html#next-steps","title":"Next Steps","text":"<p>While the system is now fully operational, there are several areas for potential enhancement:</p> <ol> <li>Model Improvements: Fine-tune hyperparameters, experiment with ensemble methods</li> <li>Additional Exchanges: Add support for more trading platforms</li> <li>Strategy Refinement: Develop more sophisticated trading logic</li> <li>Portfolio Management: Add multi-asset portfolio optimization</li> <li>User Interface: Consider a web dashboard for monitoring and control</li> <li>Alerts System: Add notification capabilities for important events</li> </ol>"},{"location":"FINAL_RESULTS.html#conclusion","title":"Conclusion","text":"<p>The BestTradingBot project is now complete and ready for deployment. The system represents a sophisticated, end-to-end solution for algorithmic cryptocurrency trading with promising performance characteristics.</p> <p>Users can now follow the documentation in README.md and QUICK_START.md to install, configure, and begin using the system for their own trading activities.</p>"},{"location":"IMPLEMENTATION_SUMMARY.html","title":"BestTradingBot Implementation Summary","text":"<p>This document summarizes the implementation status of the BestTradingBot (BTB) system.</p>"},{"location":"IMPLEMENTATION_SUMMARY.html#completed-components","title":"Completed Components","text":""},{"location":"IMPLEMENTATION_SUMMARY.html#core-framework","title":"Core Framework","text":"<ul> <li>[x] Project structure and organization</li> <li>[x] Installation process (virtual environment, dependency management)</li> <li>[x] Configuration management via YAML files</li> <li>[x] Command line interface (CLI) with subcommands</li> <li>[x] Logging system</li> </ul>"},{"location":"IMPLEMENTATION_SUMMARY.html#data-management","title":"Data Management","text":"<ul> <li>[x] Data loading module for market data</li> <li>[x] Data preprocessing for ML models</li> <li>[x] Technical indicator generation</li> <li>[x] Sequence creation for time series models</li> <li>[x] Data normalization utilities</li> </ul>"},{"location":"IMPLEMENTATION_SUMMARY.html#machine-learning-models","title":"Machine Learning Models","text":"<ul> <li>[x] Base model architecture</li> <li>[x] LSTM model with attention mechanism</li> <li>[x] Transformer model for time series</li> <li>[x] Model training pipeline</li> <li>[x] Model saving and loading</li> </ul>"},{"location":"IMPLEMENTATION_SUMMARY.html#trading-strategies","title":"Trading Strategies","text":"<ul> <li>[x] Base strategy framework</li> <li>[x] Moving average crossover strategy</li> <li>[x] Machine learning-based strategies</li> <li>[x] Strategy factory pattern for extensibility</li> <li>[x] Risk management implementation (stop-loss, take-profit)</li> </ul>"},{"location":"IMPLEMENTATION_SUMMARY.html#backtesting-engine","title":"Backtesting Engine","text":"<ul> <li>[x] Historical data simulation</li> <li>[x] Position management</li> <li>[x] Transaction cost modeling (commissions, slippage)</li> <li>[x] Performance metrics calculation</li> <li>[x] Walk-forward analysis</li> <li>[x] Monte Carlo simulation</li> <li>[x] HTML report generation</li> </ul>"},{"location":"IMPLEMENTATION_SUMMARY.html#exchange-integration","title":"Exchange Integration","text":"<ul> <li>[x] Base exchange connector</li> <li>[x] Bybit exchange implementation</li> <li>[x] Paper trading mode</li> <li>[x] Live trading execution</li> </ul>"},{"location":"IMPLEMENTATION_SUMMARY.html#documentation-and-notebooks","title":"Documentation and Notebooks","text":"<ul> <li>[x] README with comprehensive overview</li> <li>[x] Quick Start guide</li> <li>[x] Jupyter notebooks for interactive analysis</li> <li>[x] Implementation summary</li> <li>[x] Code comments and docstrings</li> </ul>"},{"location":"IMPLEMENTATION_SUMMARY.html#recent-enhancements","title":"Recent Enhancements","text":"<ol> <li>Fixed Backtester Position Handling</li> <li>Added proper null checks and control flow in stop loss and take profit handling</li> <li>Prevented NoneType errors when a position gets closed</li> <li> <p>Added continue statements to skip to next iteration after closing a position</p> </li> <li> <p>Improved Data Preprocessing</p> </li> <li>Updated to use modern Pandas methods (ffill() and bfill() instead of deprecated fillna(method=...))</li> <li> <p>Enhanced robustness of data handling and error checking</p> </li> <li> <p>Completed CLI Implementation</p> </li> <li>Fully implemented the model training command</li> <li> <p>Added proper error handling and logging throughout</p> </li> <li> <p>Enhanced Transformer Model</p> </li> <li>Added positional encoding for sequence handling</li> <li>Updated parameter handling for more intuitive configuration</li> <li> <p>Fixed dimension issues and compatibility with PyTorch</p> </li> <li> <p>Added Report Generation</p> </li> <li>Implemented HTML report generation with Jinja2 templating</li> <li> <p>Added visualizations of equity curves, drawdowns, and trade distributions</p> </li> <li> <p>Completed Walk-Forward Analysis</p> </li> <li>Added model training support in walk-forward testing</li> <li>Implemented consolidated metrics across testing windows</li> </ol>"},{"location":"IMPLEMENTATION_SUMMARY.html#implementation-notes","title":"Implementation Notes","text":""},{"location":"IMPLEMENTATION_SUMMARY.html#current-status","title":"Current Status","text":"<p>The BestTradingBot system is now fully implemented and ready for use. All major components are functional and integrated, allowing for:</p> <ol> <li>Data preprocessing and exploration</li> <li>Model training and evaluation</li> <li>Backtesting with various strategies</li> <li>Walk-forward testing for strategy robustness</li> <li>Report generation for performance analysis</li> <li>Live trading capability with Bybit</li> </ol>"},{"location":"IMPLEMENTATION_SUMMARY.html#performance","title":"Performance","text":"<p>Backtesting a moving average crossover strategy on BTC/USDT 1-hour data from 2022-01-01 to 2023-01-01 showed: - Total return: 13.00% - Sharpe ratio: -0.10 - Maximum drawdown: 4.83% - Win rate: 40.36%</p> <p>The performance can be further improved by optimizing strategy parameters and model training.</p>"},{"location":"IMPLEMENTATION_SUMMARY.html#known-limitations","title":"Known Limitations","text":"<ol> <li>Market Data: Currently relies on historical data that needs to be refreshed periodically</li> <li>Model Training Time: Training complex models can be time-consuming without GPU acceleration</li> <li>Risk Management: Basic risk management is implemented, but could be enhanced with portfolio-level controls</li> <li>Exchange Support: Currently only Bybit is supported; additional exchanges could be added</li> </ol>"},{"location":"IMPLEMENTATION_SUMMARY.html#next-development-steps","title":"Next Development Steps","text":"<ol> <li>Add more exchanges: Implement connectors for Binance, FTX, etc.</li> <li>Enhance portfolio management: Add portfolio-level risk management</li> <li>Implement ensemble strategies: Combine multiple strategies for more robust performance</li> <li>Add notifications system: Email/SMS alerts for trade execution and risk events</li> <li>Create web dashboard: For easier monitoring and control of live trading</li> </ol>"},{"location":"IMPLEMENTATION_SUMMARY.html#usage-recommendations","title":"Usage Recommendations","text":"<p>For best results: 1. Start with data exploration using the Jupyter notebooks 2. Train models on small datasets first to validate functioning 3. Keep initial training epochs low for rapid iteration during development 4. Run comprehensive backtests before live trading 5. Start with small position sizes in live trading 6. Regularly monitor and retrain models as market conditions change</p>"},{"location":"INSTALLATION.html","title":"Installation Guide","text":"<p>This guide provides step-by-step instructions for installing and setting up the Best Trading Bot (BTB).</p>"},{"location":"INSTALLATION.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>Git</li> <li>pip (Python package manager)</li> </ul>"},{"location":"INSTALLATION.html#basic-installation","title":"Basic Installation","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/gianlucamazza/btb-besttradingbot.git\ncd btb-besttradingbot\n</code></pre> <ol> <li>Create and activate a virtual environment:</li> </ol> <pre><code># Create a virtual environment\npython -m venv .venv\n\n# Activate the virtual environment\n# On macOS/Linux:\nsource .venv/bin/activate\n# On Windows:\n# .venv\\Scripts\\activate\n</code></pre> <ol> <li>Install the required dependencies:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Install the package in development mode:</li> </ol> <pre><code>pip install -e .\n</code></pre>"},{"location":"INSTALLATION.html#installation-with-development-dependencies","title":"Installation with Development Dependencies","text":"<p>If you plan to contribute to the project, you'll need development dependencies as well:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This installs additional dependencies such as: - pytest (for testing) - black (for code formatting) - ruff (for linting) - mypy (for type checking)</p>"},{"location":"INSTALLATION.html#setting-up-api-access","title":"Setting Up API Access","text":"<p>To use the trading bot with real or test exchanges, you need to set up API credentials:</p> <ol> <li>Create a <code>.env</code> file in the project root directory:</li> </ol> <pre><code>cp .env.example .env\n</code></pre> <ol> <li>Open the <code>.env</code> file and add your API credentials:</li> </ol> <pre><code>BYBIT_API_KEY=your_api_key_here\nBYBIT_API_SECRET=your_api_secret_here\nBYBIT_TESTNET=True  # Set to False for live trading\n</code></pre>"},{"location":"INSTALLATION.html#verifying-installation","title":"Verifying Installation","text":"<p>To verify that everything is installed correctly, run:</p> <pre><code># Check CLI commands\nbtb --help\n\n# Run a simple test\npytest tests/\n</code></pre>"},{"location":"INSTALLATION.html#updating","title":"Updating","text":"<p>To update to the latest version:</p> <pre><code>git pull\npip install -e .\n</code></pre>"},{"location":"INSTALLATION.html#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ul> <li>Make sure you have the correct Python version</li> <li>Check that all dependencies are properly installed</li> <li>Verify your API credentials if connecting to exchanges</li> </ul> <p>For more detailed help, check the Configuration Guide or open an issue on GitHub.</p>"},{"location":"MODELS.html","title":"Model Architecture","text":""},{"location":"MODELS.html#overview","title":"Overview","text":"<p>BestTradingBot employs advanced deep learning models implemented in PyTorch to predict market movements and generate trading signals. This document describes the architecture of these models, their implementation, and customization options.</p>"},{"location":"MODELS.html#model-types","title":"Model Types","text":""},{"location":"MODELS.html#transformer-model","title":"Transformer Model","text":"<p>The primary model architecture is based on the Transformer, which has demonstrated superior performance in sequence modeling tasks.</p>"},{"location":"MODELS.html#architecture-details","title":"Architecture Details","text":"<pre><code>Input \u2192 Embedding \u2192 Positional Encoding \u2192 Transformer Encoder \u2192 MLP Head \u2192 Output\n</code></pre> <ul> <li>Embedding Layer: Converts numerical features into a high-dimensional representation</li> <li>Positional Encoding: Adds information about the sequence position</li> <li>Transformer Encoder: Self-attention mechanism to capture temporal relationships</li> <li>MLP Head: Final layers that output predictions</li> </ul>"},{"location":"MODELS.html#implementation","title":"Implementation","text":"<pre><code>class TransformerModel(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim, num_layers, nhead, dropout=0.1):\n        super(TransformerModel, self).__init__()\n        self.embedding = nn.Linear(input_dim, hidden_dim)\n        encoder_layers = nn.TransformerEncoderLayer(hidden_dim, nhead, hidden_dim*4, dropout)\n        self.transformer_encoder = nn.TransformerEncoder(encoder_layers, num_layers)\n        self.decoder = nn.Linear(hidden_dim, output_dim)\n        self.init_weights()\n\n    def init_weights(self):\n        initrange = 0.1\n        self.embedding.weight.data.uniform_(-initrange, initrange)\n        self.decoder.bias.data.zero_()\n        self.decoder.weight.data.uniform_(-initrange, initrange)\n\n    def forward(self, src, src_mask=None):\n        src = self.embedding(src)\n        output = self.transformer_encoder(src, src_mask)\n        output = self.decoder(output)\n        return output\n</code></pre>"},{"location":"MODELS.html#lstm-model","title":"LSTM Model","text":"<p>Long Short-Term Memory networks are used for capturing long-term dependencies in time series data.</p>"},{"location":"MODELS.html#architecture-details_1","title":"Architecture Details","text":"<pre><code>Input \u2192 LSTM Layers \u2192 Attention Layer \u2192 MLP Head \u2192 Output\n</code></pre>"},{"location":"MODELS.html#implementation_1","title":"Implementation","text":"<pre><code>class LSTMAttentionModel(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim, num_layers, dropout=0.1):\n        super(LSTMAttentionModel, self).__init__()\n        self.lstm = nn.LSTM(input_dim, hidden_dim, num_layers, batch_first=True, dropout=dropout)\n        self.attention = nn.MultiheadAttention(hidden_dim, num_heads=8, dropout=dropout)\n        self.fc = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        lstm_out, _ = self.lstm(x)\n        attn_output, _ = self.attention(lstm_out, lstm_out, lstm_out)\n        output = self.fc(attn_output)\n        return output\n</code></pre>"},{"location":"MODELS.html#cnn-model","title":"CNN Model","text":"<p>Convolutional Neural Networks are effective at capturing local patterns in the data.</p>"},{"location":"MODELS.html#architecture-details_2","title":"Architecture Details","text":"<pre><code>Input \u2192 Conv1D Layers \u2192 Global Pooling \u2192 MLP Head \u2192 Output\n</code></pre>"},{"location":"MODELS.html#implementation_2","title":"Implementation","text":"<pre><code>class CNN1DModel(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim, kernel_sizes=[3, 5, 7], dropout=0.1):\n        super(CNN1DModel, self).__init__()\n        self.convs = nn.ModuleList([\n            nn.Conv1d(in_channels=input_dim, out_channels=hidden_dim, kernel_size=k)\n            for k in kernel_sizes\n        ])\n        self.dropout = nn.Dropout(dropout)\n        self.fc = nn.Linear(hidden_dim * len(kernel_sizes), output_dim)\n\n    def forward(self, x):\n        x = x.permute(0, 2, 1)  # [batch, features, sequence]\n        conv_results = []\n        for conv in self.convs:\n            conv_out = F.relu(conv(x))\n            pool_out = F.adaptive_max_pool1d(conv_out, 1).squeeze(-1)\n            conv_results.append(pool_out)\n        concat = torch.cat(conv_results, dim=1)\n        dropout = self.dropout(concat)\n        output = self.fc(dropout)\n        return output\n</code></pre>"},{"location":"MODELS.html#ensemble-model","title":"Ensemble Model","text":"<p>Combines multiple model types to improve prediction robustness.</p>"},{"location":"MODELS.html#architecture-details_3","title":"Architecture Details","text":"<pre><code>Input \u2192 [Transformer, LSTM, CNN] \u2192 Aggregation Layer \u2192 MLP Head \u2192 Output\n</code></pre>"},{"location":"MODELS.html#implementation_3","title":"Implementation","text":"<pre><code>class EnsembleModel(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim, config):\n        super(EnsembleModel, self).__init__()\n        self.transformer = TransformerModel(input_dim, hidden_dim, hidden_dim, \n                                         config[\"transformer\"][\"num_layers\"], \n                                         config[\"transformer\"][\"nhead\"])\n        self.lstm = LSTMAttentionModel(input_dim, hidden_dim, hidden_dim, \n                                     config[\"lstm\"][\"num_layers\"])\n        self.cnn = CNN1DModel(input_dim, hidden_dim, hidden_dim)\n        self.aggregation = nn.Linear(hidden_dim * 3, hidden_dim)\n        self.output_layer = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        transformer_out = self.transformer(x)\n        lstm_out = self.lstm(x)\n        cnn_out = self.cnn(x)\n        # Use the output from the last time step for each model\n        transformer_out = transformer_out[:, -1, :]\n        lstm_out = lstm_out[:, -1, :]\n        # Concatenate model outputs\n        combined = torch.cat([transformer_out, lstm_out, cnn_out], dim=1)\n        aggregated = F.relu(self.aggregation(combined))\n        output = self.output_layer(aggregated)\n        return output\n</code></pre>"},{"location":"MODELS.html#feature-engineering","title":"Feature Engineering","text":"<p>A crucial aspect of model performance is feature engineering. The system processes raw market data to extract meaningful features:</p> <ol> <li>Technical Indicators:</li> <li>Moving averages (SMA, EMA, WMA)</li> <li>RSI (Relative Strength Index)</li> <li>MACD (Moving Average Convergence Divergence)</li> <li>Bollinger Bands</li> <li>Stochastic Oscillator</li> <li> <p>ATR (Average True Range)</p> </li> <li> <p>Price Data Transformations:</p> </li> <li>Log returns</li> <li>Normalized prices</li> <li>Price momentum</li> <li> <p>Volatility measures</p> </li> <li> <p>Temporal Features:</p> </li> <li>Time of day</li> <li>Day of week</li> <li>Month</li> <li> <p>Holiday indicators</p> </li> <li> <p>Market Sentiment Features (optional):</p> </li> <li>Social media sentiment</li> <li>News sentiment</li> <li>Market fear/greed indicators</li> </ol>"},{"location":"MODELS.html#training-process","title":"Training Process","text":"<p>The model training pipeline includes:</p> <ol> <li>Data Preprocessing:</li> <li>Splitting data into training, validation, and test sets</li> <li>Feature normalization</li> <li> <p>Sequence creation (sliding window approach)</p> </li> <li> <p>Model Training:</p> </li> <li>Mini-batch gradient descent</li> <li>Configurable optimizers (Adam, SGD, RMSprop)</li> <li>Learning rate schedulers</li> <li> <p>Early stopping based on validation loss</p> </li> <li> <p>Hyperparameter Optimization:</p> </li> <li>Bayesian optimization for hyperparameter tuning</li> <li>Cross-validation to ensure robustness</li> </ol>"},{"location":"MODELS.html#model-evaluation","title":"Model Evaluation","text":"<p>Models are evaluated using both traditional ML metrics and financial metrics:</p> <ol> <li>ML Metrics:</li> <li>Mean Squared Error (MSE)</li> <li>Mean Absolute Error (MAE)</li> <li>R-squared</li> <li> <p>Directional Accuracy</p> </li> <li> <p>Financial Metrics:</p> </li> <li>Backtested returns</li> <li>Sharpe ratio</li> <li>Sortino ratio</li> <li>Maximum drawdown</li> <li>Win rate</li> </ol>"},{"location":"MODELS.html#deployment","title":"Deployment","text":"<p>Trained models are serialized and saved for deployment:</p> <pre><code># Save model\ntorch.save({\n    'model_state_dict': model.state_dict(),\n    'optimizer_state_dict': optimizer.state_dict(),\n    'config': model_config,\n    'feature_names': feature_names,\n    'scaler': scaler,  # For feature normalization\n    'performance_metrics': metrics\n}, 'models/transformer_btcusdt_1h.pt')\n\n# Load model for inference\ncheckpoint = torch.load('models/transformer_btcusdt_1h.pt')\nmodel = TransformerModel(**checkpoint['config'])\nmodel.load_state_dict(checkpoint['model_state_dict'])\nmodel.eval()  # Set to evaluation mode\n</code></pre>"},{"location":"MODELS.html#hardware-acceleration","title":"Hardware Acceleration","text":"<p>The system supports GPU acceleration for faster training and inference:</p> <pre><code>device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel = model.to(device)\ninput_data = input_data.to(device)\n</code></pre>"},{"location":"MODELS.html#customization","title":"Customization","text":"<p>The model architecture can be customized through the configuration files. Key parameters include:</p> <ul> <li>Number of layers</li> <li>Hidden dimension size</li> <li>Number of attention heads</li> <li>Dropout rate</li> <li>Optimizer choice and learning rate</li> <li>Sequence length</li> <li>Feature selection</li> </ul> <p>Refer to the <code>model_config.yaml</code> file for all available options.</p>"},{"location":"QUICK_START.html","title":"BestTradingBot - Quick Start Guide","text":"<p>This guide provides a step-by-step walkthrough to get you up and running with BestTradingBot quickly.</p>"},{"location":"QUICK_START.html#1-installation","title":"1. Installation","text":"<pre><code># Clone the repository (if you haven't already)\ngit clone https://github.com/gianlucamazza/btb-besttradingbot.git\ncd btb-besttradingbot\n\n# Create and activate a virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Install the package in development mode\npip install -e .\n</code></pre>"},{"location":"QUICK_START.html#2-data-preparation","title":"2. Data Preparation","text":"<p>Before developing trading strategies or running backtests, you need data:</p> <pre><code># Create necessary directories\nmkdir -p data/processed\n\n# Run data preparation command\nbtb prepare-data --config config/backtest_config.yaml --output-dir data/processed\n\n# This will create processed data files in data/processed/ directory\n# You should see files like BTCUSDT_1h_processed.csv\n</code></pre>"},{"location":"QUICK_START.html#3-train-a-model","title":"3. Train a Model","text":"<pre><code># Train an LSTM model\nbtb train --data data/processed/BTCUSDT_1h_processed.csv --model lstm --config config/model_config.yaml\n\n\n# This will save a model to the models/ directory\n</code></pre>"},{"location":"QUICK_START.html#4-run-a-backtest","title":"4. Run a Backtest","text":"<pre><code># Run a backtest using the configuration file\nbtb backtest --config config/backtest_config.yaml\n\n# Generate a backtest report\nbtb backtest --config config/backtest_config.yaml --report results/backtest_report.html\n</code></pre>"},{"location":"QUICK_START.html#5-analyze-results-in-jupyter-notebooks","title":"5. Analyze Results in Jupyter Notebooks","text":"<pre><code># Start Jupyter\njupyter notebook\n\n# Open the following notebooks:\n# 5_demo_run.ipynb - For a quick demonstration\n# 3_strategy_testing.ipynb - For detailed strategy analysis\n</code></pre>"},{"location":"QUICK_START.html#6-live-trading-setup","title":"6. Live Trading Setup","text":"<p>For live trading with Bybit, you need to:</p> <ol> <li>Create a <code>.env</code> file with your API credentials:</li> </ol> <pre><code>cp .env.example .env\n# Edit .env and add your Bybit API key and secret\n</code></pre> <ol> <li> <p>Configure trading parameters in <code>config/trading_config.yaml</code></p> </li> <li> <p>Start live trading:</p> </li> </ol> <pre><code>btb run --config config/trading_config.yaml\n</code></pre>"},{"location":"QUICK_START.html#7-model-and-strategy-development","title":"7. Model and Strategy Development","text":"<p>To develop your own strategies:</p> <ol> <li>Explore existing strategies in <code>btb/strategies/</code></li> <li>Create a new strategy file, e.g., <code>btb/strategies/my_strategy.py</code></li> <li>Implement the <code>BaseStrategy</code> interface with your logic</li> <li>Register your strategy in <code>btb/strategies/factory.py</code></li> <li>Test your strategy through backtest</li> </ol> <p>To develop your own models:</p> <ol> <li>Explore existing models in <code>btb/models/</code></li> <li>Create a new model file, e.g., <code>btb/models/my_model.py</code></li> <li>Implement the <code>BaseModel</code> interface with your architecture</li> <li>Train your model using the training utilities</li> </ol>"},{"location":"QUICK_START.html#8-understanding-results","title":"8. Understanding Results","text":"<p>When running a backtest, pay attention to:</p> <ul> <li>Total Return: Overall percentage gain/loss</li> <li>Sharpe Ratio: Risk-adjusted return (higher is better, &gt;1 is good)</li> <li>Maximum Drawdown: Largest percentage drop from peak to trough</li> <li>Win Rate: Percentage of profitable trades</li> </ul> <p>The HTML report will provide visualizations of: - Equity curve - Drawdown periods - Trade distributions - Monthly returns</p>"},{"location":"QUICK_START.html#9-command-line-interface-cli-reference","title":"9. Command Line Interface (CLI) Reference","text":"<p>Backtest: <pre><code>btb backtest --config CONFIG_FILE [--output OUTPUT_FILE] [--report REPORT_FILE] [--plot] [--verbose]\n</code></pre></p> <p>Train: <pre><code>btb train --data DATA_FILE --model MODEL_TYPE [--config CONFIG_FILE] [--output OUTPUT_DIR] [--epochs EPOCHS]\n</code></pre></p> <p>Train All Models: <pre><code>btb train-all --data-dir DATA_DIR --model MODEL_TYPE [--config CONFIG_FILE] [--output OUTPUT_DIR] [--symbols SYMBOLS] [--timeframes TIMEFRAMES] [--parallel]\n</code></pre></p> <p>Data Preparation: <pre><code>btb prepare-data --config CONFIG_FILE [--output-dir OUTPUT_DIR] [--verbose]\n</code></pre></p> <p>Live Trading: <pre><code>btb run --config CONFIG_FILE [--verbose]\n</code></pre></p> <p>Cleanup: <pre><code>btb cleanup [--logs] [--cache] [--pycache] [--verbose]\n</code></pre></p>"},{"location":"QUICK_START.html#10-common-issues-and-solutions","title":"10. Common Issues and Solutions","text":"<ul> <li>Exchange API issues: Ensure your API keys have the correct permissions</li> <li>Model training errors: Check data dimensions and ensure sequence lengths match</li> <li>Backtesting performance: Optimize strategy parameters in config files</li> <li>Memory usage concerns: Reduce sequence lengths or batch sizes for larger datasets</li> </ul>"},{"location":"QUICK_START.html#next-steps","title":"Next Steps","text":"<ul> <li>Explore walk-forward analysis for robust strategy validation</li> <li>Try different combinations of technical indicators</li> <li>Experiment with ensemble strategies combining multiple models</li> <li>Check documentation for advanced usage scenarios</li> </ul> <p>For full documentation, please refer to the main Home page and other documentation sections.</p>"},{"location":"STRATEGIES.html","title":"Trading Strategies","text":""},{"location":"STRATEGIES.html#overview","title":"Overview","text":"<p>BestTradingBot offers a variety of trading strategies powered by machine learning models. This document describes the available strategies, their implementation, and how to customize them for your specific needs.</p>"},{"location":"STRATEGIES.html#strategy-framework","title":"Strategy Framework","text":"<p>All trading strategies in BTB follow a common interface, making it easy to create and test new strategies:</p> <pre><code>from abc import ABC, abstractmethod\nfrom typing import Dict, List, Optional, Tuple, Union\nimport numpy as np\nimport pandas as pd\n\nclass BaseStrategy(ABC):\n    \"\"\"Base class for all trading strategies.\"\"\"\n\n    def __init__(self, params: Dict):\n        \"\"\"Initialize strategy with parameters.\"\"\"\n        self.params = params\n\n    @abstractmethod\n    def generate_signals(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"Generate trading signals based on the data.\n\n        Args:\n            data: DataFrame with market data\n\n        Returns:\n            DataFrame with signals (1 for buy, -1 for sell, 0 for hold)\n        \"\"\"\n        pass\n\n    def calculate_position_size(self, capital: float, price: float) -&gt; float:\n        \"\"\"Calculate position size based on available capital.\n\n        Args:\n            capital: Available capital\n            price: Current asset price\n\n        Returns:\n            Position size in base currency units\n        \"\"\"\n        position_pct = self.params.get(\"position_size\", 0.1)  # Default 10%\n        return (capital * position_pct) / price\n\n    @abstractmethod\n    def should_update_stops(self, position, current_price: float) -&gt; Tuple[bool, Optional[float], Optional[float]]:\n        \"\"\"Determine if stop loss/take profit should be updated.\n\n        Args:\n            position: Current position information\n            current_price: Current asset price\n\n        Returns:\n            Tuple of (update_required, new_stop_loss, new_take_profit)\n        \"\"\"\n        pass\n</code></pre>"},{"location":"STRATEGIES.html#available-strategies","title":"Available Strategies","text":""},{"location":"STRATEGIES.html#1-transformer-based-strategy","title":"1. Transformer-Based Strategy","text":"<p>This strategy uses a Transformer neural network to predict price movements and generate trading signals.</p> <pre><code>class TransformerStrategy(BaseStrategy):\n    \"\"\"Trading strategy based on Transformer model predictions.\"\"\"\n\n    def __init__(self, params: Dict):\n        super().__init__(params)\n        self.model = self._load_model(params[\"model_path\"])\n        self.confidence_threshold = params.get(\"confidence_threshold\", 0.6)\n        self.sequence_length = params.get(\"sequence_length\", 60)\n        self.prediction_horizon = params.get(\"prediction_horizon\", 24)\n        self.stop_loss = params.get(\"stop_loss\", 0.02)  # 2%\n        self.take_profit = params.get(\"take_profit\", 0.04)  # 4%\n        self.trailing_stop = params.get(\"trailing_stop\", False)\n        self.trailing_activation = params.get(\"trailing_stop_activation\", 0.01)  # 1%\n        self.trailing_distance = params.get(\"trailing_stop_distance\", 0.005)  # 0.5%\n\n    def _load_model(self, model_path: str):\n        \"\"\"Load the trained model from file.\"\"\"\n        import torch\n        checkpoint = torch.load(model_path, map_location=torch.device('cpu'))\n        model = self._build_model_from_config(checkpoint[\"config\"])\n        model.load_state_dict(checkpoint[\"model_state_dict\"])\n        model.eval()\n        return model\n\n    def _build_model_from_config(self, config):\n        \"\"\"Build model architecture from config.\"\"\"\n        from btb.models.transformer import TransformerModel\n        return TransformerModel(**config)\n\n    def _preprocess_data(self, data: pd.DataFrame) -&gt; torch.Tensor:\n        \"\"\"Preprocess data for model input.\"\"\"\n        # Implementation details omitted for brevity\n        pass\n\n    def generate_signals(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"Generate trading signals based on model predictions.\"\"\"\n        import torch\n\n        # Add signals column to data\n        data = data.copy()\n        data[\"signal\"] = 0\n\n        # Skip if not enough data\n        if len(data) &lt; self.sequence_length + self.prediction_horizon:\n            return data\n\n        # Prepare data for model\n        X = self._preprocess_data(data)\n\n        # Generate predictions\n        with torch.no_grad():\n            predictions = self.model(X).numpy()\n\n        # Convert predictions to signals\n        for i in range(len(data) - self.prediction_horizon):\n            pred_return = predictions[i, 0]  # Predicted return\n            confidence = abs(predictions[i, 1])  # Prediction confidence\n\n            # Generate signal if confidence exceeds threshold\n            if confidence &gt; self.confidence_threshold:\n                signal = 1 if pred_return &gt; 0 else -1\n                data.loc[data.index[i + self.prediction_horizon], \"signal\"] = signal\n\n        return data\n\n    def should_update_stops(self, position, current_price: float) -&gt; Tuple[bool, Optional[float], Optional[float]]:\n        \"\"\"Update stop loss and take profit levels.\"\"\"\n        if not position or not position[\"is_open\"]:\n            return False, None, None\n\n        entry_price = position[\"entry_price\"]\n        position_type = position[\"type\"]  # 'long' or 'short'\n        current_stop = position.get(\"stop_loss\")\n        current_take = position.get(\"take_profit\")\n\n        # Calculate profit percentage\n        if position_type == \"long\":\n            profit_pct = (current_price - entry_price) / entry_price\n        else:  # short\n            profit_pct = (entry_price - current_price) / entry_price\n\n        # Initialize new stop loss and take profit\n        new_stop = current_stop\n        new_take = current_take\n\n        # Update trailing stop if enabled and activated\n        if self.trailing_stop and profit_pct &gt;= self.trailing_activation:\n            if position_type == \"long\":\n                trailing_level = current_price * (1 - self.trailing_distance)\n                if not current_stop or trailing_level &gt; current_stop:\n                    new_stop = trailing_level\n            else:  # short\n                trailing_level = current_price * (1 + self.trailing_distance)\n                if not current_stop or trailing_level &lt; current_stop:\n                    new_stop = trailing_level\n\n        # Determine if update is needed\n        update_needed = (new_stop != current_stop) or (new_take != current_take)\n        return update_needed, new_stop, new_take\n</code></pre>"},{"location":"STRATEGIES.html#2-lstm-with-attention-strategy","title":"2. LSTM with Attention Strategy","text":"<p>This strategy uses an LSTM network with an attention mechanism to capture long-term dependencies in price data.</p> <pre><code>class LSTMAttentionStrategy(BaseStrategy):\n    \"\"\"Trading strategy based on LSTM with attention.\"\"\"\n\n    # Implementation details similar to TransformerStrategy\n    pass\n</code></pre>"},{"location":"STRATEGIES.html#3-ensemble-strategy","title":"3. Ensemble Strategy","text":"<p>Combines predictions from multiple models to generate more robust trading signals.</p> <pre><code>class EnsembleStrategy(BaseStrategy):\n    \"\"\"Trading strategy that combines signals from multiple models.\"\"\"\n\n    def __init__(self, params: Dict):\n        super().__init__(params)\n        self.models = self._load_models(params[\"model_paths\"])\n        self.weights = params.get(\"model_weights\", None)  # Optional weighting\n        # ... other initialization ...\n\n    def _load_models(self, model_paths: List[str]):\n        \"\"\"Load multiple models.\"\"\"\n        models = []\n        for path in model_paths:\n            # Load model\n            pass\n        return models\n\n    def generate_signals(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"Generate signals by aggregating predictions from all models.\"\"\"\n        # Implementation details omitted for brevity\n        pass\n</code></pre>"},{"location":"STRATEGIES.html#4-reinforcement-learning-strategy","title":"4. Reinforcement Learning Strategy","text":"<p>Uses reinforcement learning to learn optimal trading actions directly from market data.</p> <pre><code>class RLStrategy(BaseStrategy):\n    \"\"\"Trading strategy based on reinforcement learning.\"\"\"\n\n    def __init__(self, params: Dict):\n        super().__init__(params)\n        self.agent = self._load_agent(params[\"agent_path\"])\n        # ... other initialization ...\n\n    def _load_agent(self, agent_path: str):\n        \"\"\"Load trained RL agent.\"\"\"\n        # Implementation details omitted for brevity\n        pass\n\n    def generate_signals(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"Generate signals using RL agent.\"\"\"\n        # Implementation details omitted for brevity\n        pass\n</code></pre>"},{"location":"STRATEGIES.html#strategy-configuration","title":"Strategy Configuration","text":"<p>Each strategy can be configured via YAML files. Here's an example configuration for the Transformer strategy:</p> <pre><code># config/strategies/transformer_strategy.yaml\nstrategy:\n  name: \"transformer_strategy\"\n  model_path: \"models/transformer_btcusdt_1h.pt\"\n  confidence_threshold: 0.65\n  sequence_length: 60\n  prediction_horizon: 24\n  position_size: 0.1  # 10% of capital per trade\n  max_open_positions: 3\n  stop_loss: 0.02  # 2%\n  take_profit: 0.04  # 4%\n  trailing_stop: true\n  trailing_stop_activation: 0.01  # 1%\n  trailing_stop_distance: 0.005  # 0.5%\n</code></pre>"},{"location":"STRATEGIES.html#risk-management","title":"Risk Management","text":"<p>All strategies incorporate risk management features:</p> <ol> <li>Position Sizing: Control how much capital to allocate per trade</li> <li>Stop Loss: Automatically exit losing trades at a predetermined level</li> <li>Take Profit: Secure profits at a predetermined level</li> <li>Trailing Stop: Dynamic stop loss that follows price in profitable trades</li> <li>Maximum Open Positions: Limit the number of concurrent trades</li> <li>Confidence Thresholds: Only trade when model predictions exceed a confidence level</li> </ol>"},{"location":"STRATEGIES.html#creating-custom-strategies","title":"Creating Custom Strategies","text":"<p>To create a custom strategy:</p> <ol> <li>Subclass <code>BaseStrategy</code> and implement the required methods</li> <li>Register your strategy in the strategy factory</li> <li>Create a configuration file for your strategy</li> </ol> <p>Example of a custom strategy implementation:</p> <pre><code>from btb.strategies.base import BaseStrategy\nfrom btb.strategies.factory import register_strategy\n\n@register_strategy(\"my_custom_strategy\")\nclass MyCustomStrategy(BaseStrategy):\n    \"\"\"A custom trading strategy.\"\"\"\n\n    def __init__(self, params: Dict):\n        super().__init__(params)\n        # Custom initialization\n\n    def generate_signals(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"Implement your custom signal generation logic.\"\"\"\n        # Implementation\n        return data_with_signals\n\n    def should_update_stops(self, position, current_price: float) -&gt; Tuple[bool, Optional[float], Optional[float]]:\n        \"\"\"Implement custom stop loss/take profit logic.\"\"\"\n        # Implementation\n        return update_needed, new_stop, new_take\n</code></pre>"},{"location":"STRATEGIES.html#strategy-evaluation","title":"Strategy Evaluation","text":"<p>All strategies should be thoroughly tested using the backtesting framework before live deployment. Important metrics to evaluate include:</p> <ul> <li>Total return</li> <li>Risk-adjusted return (Sharpe ratio, Sortino ratio)</li> <li>Maximum drawdown</li> <li>Win rate</li> <li>Profit factor</li> </ul> <p>See the Backtesting Framework documentation for details on strategy evaluation.</p>"},{"location":"UPDATES.html","title":"Documentation Updates - April 2025","text":""},{"location":"UPDATES.html#recent-implementation-updates","title":"Recent Implementation Updates","text":"<p>This document outlines the recent updates and improvements to the BestTradingBot system as of April 2025.</p>"},{"location":"UPDATES.html#1-backtester-engine-improvements","title":"1. Backtester Engine Improvements","text":"<p>The backtesting engine has been significantly enhanced:</p> <ul> <li>Fixed Position Handling: Added proper null checks and improved control flow in stop loss and take profit handling</li> <li>Report Generation: Implemented comprehensive HTML report generation with interactive visualizations</li> <li>Monte Carlo Simulation: Added functionality to simulate thousands of trading scenarios for risk assessment</li> <li>Walk-Forward Analysis: Completed walk-forward analysis implementation with model training capabilities</li> </ul> <p>Example of improved position handling code:</p> <pre><code># Check for stop loss / take profit\nif position is not None and position.get(\"is_open\", False):\n    # Stop loss handling\n    stop_loss = position.get(\"stop_loss\")\n    if stop_loss is not None:\n        if (position_type == \"long\" and current_price &lt;= stop_loss) or \\\n           (position_type == \"short\" and current_price &gt;= stop_loss):\n            # Stop loss triggered\n            # ... handle stop loss ...\n            position = None\n            continue  # Continue to next iteration since position is closed\n\n    # Only check take profit if position is still open\n    if position is not None:  # Check position again as it might have been closed by stop loss\n        take_profit = position.get(\"take_profit\")\n        if take_profit is not None:\n            # ... handle take profit ...\n</code></pre>"},{"location":"UPDATES.html#2-model-implementations","title":"2. Model Implementations","text":"<p>Both primary model architectures have been fully implemented and optimized:</p> <ul> <li>LSTM with Attention: Enhanced with improved attention mechanism and dropout</li> <li>Transformer Model: Complete implementation with positional encoding for better sequence understanding</li> </ul> <p>Example of the improved Transformer model:</p> <pre><code>class _TransformerModel(nn.Module):\n    def __init__(self, input_dim, d_model, output_dim, num_encoder_layers, nhead, dim_feedforward=None, dropout=0.1):\n        super(_TransformerModel, self).__init__()\n        self.d_model = d_model\n        self.input_dim = input_dim\n\n        if dim_feedforward is None:\n            dim_feedforward = d_model * 4\n\n        # Feature embedding\n        self.embedding = nn.Linear(input_dim, d_model)\n\n        # Positional encoding\n        self.pos_encoder = PositionalEncoding(d_model, dropout)\n\n        # Transformer encoder\n        encoder_layers = nn.TransformerEncoderLayer(\n            d_model=d_model, \n            nhead=nhead, \n            dim_feedforward=dim_feedforward, \n            dropout=dropout,\n            batch_first=True\n        )\n        self.transformer_encoder = nn.TransformerEncoder(encoder_layers, num_encoder_layers)\n\n        # Output layers\n        self.decoder = nn.Linear(d_model, output_dim)\n</code></pre>"},{"location":"UPDATES.html#3-cli-commands-implementation","title":"3. CLI Commands Implementation","text":"<p>The command-line interface has been fully implemented for all operations:</p> <ul> <li>Backtesting: Complete implementation with configuration loading and report generation</li> <li>Model Training: Added comprehensive training workflow with data loading, preprocessing, and model saving</li> <li>Live Trading: Implemented with proper error handling and exchange integration</li> </ul> <p>Example usage of the fully implemented CLI:</p> <pre><code># Train a model\nbtb train --data data/processed/BTCUSDT_1h_processed.csv --model lstm --config config/model_config.yaml\n\n# Run a backtest with report generation\nbtb backtest --config config/backtest_config.yaml --report results/backtest_report.html\n\n# Start live trading\nbtb run --config config/trading_config.yaml\n</code></pre>"},{"location":"UPDATES.html#4-data-processing-improvements","title":"4. Data Processing Improvements","text":"<p>Data handling has been optimized for robustness and performance:</p> <ul> <li>Updated Methods: Replaced deprecated pandas methods with modern alternatives</li> <li>Error Handling: Enhanced error handling throughout data processing pipeline</li> <li>Sequence Creation: Improved sequence creation for time series data</li> </ul> <p>Code example of updated data processing:</p> <pre><code>def _fill_missing_values(self, data: pd.DataFrame, method: str = \"ffill\") -&gt; pd.DataFrame:\n    \"\"\"Fill missing values in the data.\"\"\"\n    df = data.copy()\n\n    if method == \"ffill\":\n        # Forward fill\n        df = df.ffill()\n        # In case there are NaNs at the beginning\n        df = df.bfill()\n    elif method == \"bfill\":\n        # Backward fill\n        df = df.bfill()\n        # In case there are NaNs at the end\n        df = df.ffill()\n    # ...\n</code></pre>"},{"location":"UPDATES.html#5-documentation-improvements","title":"5. Documentation Improvements","text":"<p>The documentation has been thoroughly updated to reflect the latest implementations:</p> <ul> <li>Installation Guide: Updated with clearer instructions and troubleshooting</li> <li>API Reference: Comprehensive documentation of all classes and methods</li> <li>Strategy Guide: Expanded with detailed examples and risk management techniques</li> <li>Model Architecture: Enhanced with implementation details and configuration options</li> <li>Quick Start Guide: Added for faster onboarding</li> </ul>"},{"location":"UPDATES.html#performance-metrics","title":"Performance Metrics","text":"<p>Our recent backtest using the Transformer strategy on BTC/USDT from 2022-01-01 to 2023-01-01 yielded the following results:</p> <ul> <li>Initial capital: $10,000.00</li> <li>Final capital: $12,430.69</li> <li>Total return: 24.31%</li> <li>Sharpe ratio: 0.27</li> <li>Maximum drawdown: 3.25%</li> <li>Win rate: 42.64%</li> </ul> <p>These results demonstrate the effectiveness of our latest improvements, showing a strong return with manageable risk.</p>"},{"location":"UPDATES.html#next-steps","title":"Next Steps","text":"<p>The following areas are planned for future development:</p> <ol> <li>Portfolio Management: Enhance multi-asset portfolio optimization</li> <li>Additional Exchanges: Implement connectors for more cryptocurrency exchanges</li> <li>Web Dashboard: Create an interactive dashboard for monitoring and control</li> <li>Advanced Risk Management: Implement portfolio-level risk controls</li> <li>Ensemble Strategies: Create meta-strategies that combine multiple models</li> </ol> <p>For more information on using these features, refer to the respective documentation sections.</p>"},{"location":"assets/images/ATTRIBUTION.html","title":"Image Attribution","text":"<p>The following images are used in this project:</p>"},{"location":"assets/images/ATTRIBUTION.html#logos","title":"Logos","text":"<ul> <li><code>btb_logo.png</code> and <code>logos/logo1.png</code>: \"Crypto trading\" icon created by Freepik - Flaticon</li> <li><code>logos/logo2.png</code>: \"Bitcoin trading\" icon created by Smashicons - Flaticon</li> <li><code>logos/logo3.png</code>: \"Trading\" icon created by Freepik - Flaticon</li> <li><code>logos/logo4.png</code>: \"Trading bot\" icon created by Ranah Pixel Studio - Flaticon</li> </ul> <p>These icons are licensed under the Flaticon License. Please refer to Flaticon Terms of Use for more information on proper attribution when using these icons.</p>"}]}